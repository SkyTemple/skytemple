# Builds on all branches & PRs and packages for MacOS and Windows.
# Deploys to PyPi for tags.
name: Build, test and publish

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-18.04
    name: Build the Python wheel
    steps:
      # For tags we assume the version in setup.py is correct!
      - name: Checkout
        uses: actions/checkout@v2
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      - name: Build Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.3.3-manylinux2010_x86_64
        with:
          python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'
          system-packages: 'gettext'
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-18.04
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload *.whl
  package-windows:
    needs: build
    runs-on: windows-2019
    name: Build and package for Windows
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64, path: mingw64 },
          { msystem: MINGW32, arch: i686, path: mingw32 }
        ]
    steps:
      - name: Install MSys2 and dependencies
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.msystem }}
          install: >-
            mingw-w64-${{ matrix.arch }}-curl
            git
            unzip
            mingw-w64-${{ matrix.arch }}-python
            mingw-w64-${{ matrix.arch }}-python-pip
            mingw-w64-${{ matrix.arch }}-gtksourceview3
            mingw-w64-${{ matrix.arch }}-python-pillow
            mingw-w64-${{ matrix.arch }}-enchant
            mingw-w64-${{ matrix.arch }}-hunspell-en
            mingw-w64-${{ matrix.arch }}-python-cairo
            mingw-w64-${{ matrix.arch }}-gtk3
            mingw-w64-${{ matrix.arch }}-python3-gobject
            mingw-w64-${{ matrix.arch }}-python-cffi
            mingw-w64-${{ matrix.arch }}-hunspell
            mingw-w64-${{ matrix.arch }}-hunspell-en
            mingw-w64-${{ matrix.arch }}-openssl
      - name: Checkout
        uses: actions/checkout@v2
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: msys2 {0}
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
          echo "IS_DEV_BUILD=1" >> $GITHUB_ENV
      - name: Note version
        shell: msys2 {0}
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Install and package
        shell: msys2 {0}
        run: |
          cd installer

          # Download armips and other binary depedencies
          ./download-windows-dependencies.sh ${{ matrix.arch }}

          # Download and prepare the Arc theme
          curl https://skytemple.org/build_deps/Arc.zip -O
          unzip Arc.zip

          # Install NSIS
          curl https://skytemple.org/build_deps/nsis.zip -O
          unzip -o nsis.zip -d "/c/Program Files (x86)/NSIS"

          # Install PyInstaller
          pip3 install setuptools
          pip3 install pyinstaller

          # Package
          ./build-windows.sh $PACKAGE_VERSION
        env:
          MINGW_VERSION: ${{ matrix.path }}
      - name: Create installer
        uses: joncloud/makensis-action@v3.4
        with:
          script-file: "${{ matrix.arch == 'i686' && 'installer/skytemple32.nsi' || 'installer/skytemple.nsi' }}"
          arguments: "/DPRODUCT_VERSION=${{ env.PACKAGE_VERSION }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: skytemple-windows-app-${{ matrix.arch }}
          path: |
            installer/skytemple-*-install-*.exe

  package-mac:
    needs: build
    runs-on: macos-10.15
    name: Build and package for Mac OS
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
          echo "IS_DEV_BUILD=1" >> $GITHUB_ENV
      - name: Note version
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Install and package
        run: |
          brew install enchant
          brew install git pygobject3 gtk+3 python@3.9 gtksourceview3 adwaita-icon-theme sdl cmake
          PATH=/usr/local/opt/python@3.9/bin:/usr/local/bin:$PATH


          # Install other dependencies and SkyTemple itself
          pip3 install py-desmume skytemple-rust pyinstaller
          pip3 install -r requirements-mac-windows.txt
          pip3 install .
          if [ -n "$IS_DEV_BUILD" ]; then
            installer/install-skytemple-components-from-git.sh
          fi

          cd installer

          # Install themes
          curl https://skytemple.org/build_deps/Arc.zip -O
          unzip Arc.zip > /dev/null

          # Download armips
          curl https://skytemple.org/build_deps/mac/armips -O
          chmod +x armips

          # Package
          ./build-mac.sh $PACKAGE_VERSION

          # Creating a zip makes the artifact upload much faster since there are so many files
          zip -r skytemple-mac.zip dist/SkyTemple.app > /dev/null

      - name: Upload .app
        uses: actions/upload-artifact@v2
        with:
          name: skytemple-mac-app
          path: |
            installer/skytemple-mac.zip

      - name: Create installer
        run: |
          # See https://github.com/sindresorhus/create-dmg
          # create-dmg automatically generates an installer icon if imagemagick is installed
          brew install graphicsmagick imagemagick

          # This tool returns exit code 2 if the DMG was created but code signing failed for some reason
          npx create-dmg --dmg-title=SkyTemple installer/dist/SkyTemple.app installer || true

      - name: Upload .dmg
        uses: actions/upload-artifact@v2
        with:
          name: skytemple-mac-dmg
          path: |
            installer/SkyTemple*.dmg
